# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, pkgs, modulesPath, ... }:

{
  imports = [ (modulesPath + "/installer/scan/not-detected.nix") ];

  boot.initrd.availableKernelModules =
    [ "xhci_pci" "thunderbolt" "vmd" "nvme" "sdhci_pci" ];
    
  boot.extraModulePackages = [ ];
  boot.blacklistedKernelModules = [ "nouveau" ];

  fileSystems."/" = {
    device = "/dev/disk/by-uuid/02fffffe-5088-4669-ae88-66fff0cefe89";
    fsType = "btrfs";
    options = [ "subvol=root" ];
  };

  fileSystems."/nix" = {
    device = "/dev/disk/by-uuid/02fffffe-5088-4669-ae88-66fff0cefe89";
    fsType = "btrfs";
    options = [ "subvol=nix" ];
  };

  fileSystems."/swap" = {
    device = "/dev/disk/by-uuid/02fffffe-5088-4669-ae88-66fff0cefe89";
    fsType = "btrfs";
    options = [ "subvol=swap" ];
  };

  fileSystems."/home" = {
    device = "/dev/disk/by-uuid/02fffffe-5088-4669-ae88-66fff0cefe89";
    fsType = "btrfs";
    options = [ "subvol=home" ];
  };

  fileSystems."/bin" = {
    device = "/usr/bin";
    fsType = "none";
    options = [ "bind" ];
  };

  fileSystems."/boot" = {
    device = "/dev/disk/by-uuid/679B-1C1B";
    fsType = "vfat";
    options = [ "fmask=0022" "dmask=0022" ];
  };

  swapDevices = [{
    device = "/swap/swapfile";
    size = 16 * 1024;
  }];
  boot.resumeDevice = "/dev/disk/by-uuid/02fffffe-5088-4669-ae88-66fff0cefe89";
  boot.kernelParams = [ "resume_offset=131071" ];
  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlo1.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.intel.updateMicrocode =
    lib.mkDefault config.hardware.enableRedistributableFirmware;

  systemd.services.fprintd = {
    wantedBy = [ "multi-user.target" ];
    serviceConfig.Type = "simple";
  };

  # Install the driver
  #  services.fprintd.enable = true;
  hardware.graphics = { enable = true; };
  services.hardware.bolt.enable = true;
  hardware.graphics.enable32Bit = true;
}
